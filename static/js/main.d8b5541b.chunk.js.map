{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","props","handleChange","event","target","files","type","fileReader","FileReader","readAsText","onload","console","log","result","options","headers","params","menus","setState","alertMsg","hasError","loading","axios","get","then","response","data","message","catch","error","state","Container","className","this","length","Alert","variant","Form","Group","File","id","label","onChange","Spinner","animation","join","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kTA+GeA,E,kDA7Fb,WAAYC,GAAe,IAAD,8BACxB,cAAMA,IAQRC,aAAe,SAACC,GAEd,GAAsB,qBADLA,EAAMC,OAAOC,MAAM,GACvBC,KAAb,CAQA,IAAMC,EAAa,IAAIC,WACvBD,EAAWE,WAAWN,EAAMC,OAAOC,MAAM,GAAI,SAC7CE,EAAWG,OAAS,SAACP,GAAsC,IAAD,IACxDQ,QAAQC,IAAR,UAAYT,EAAMC,cAAlB,aAAY,EAAcS,QAC1B,IAAMC,EAAU,CACdC,QAAS,CACP,eAAgB,oBAElBC,OAAQ,CAAEC,MAAK,UAAEd,EAAMC,cAAR,aAAE,EAAcS,SAEjC,EAAKK,SAAS,CACZC,SAAU,GACVC,UAAU,EACVP,OAAQ,GACRQ,SAAS,IAEXC,IACGC,IACiC,8BAChCT,GAEDU,MAAK,SAACC,GACL,EAAKP,SAAS,CACZC,SAAUM,EAASC,KAAKC,QACxBP,UAAU,EACVP,OAAQY,EAASC,KAAKb,OACtBQ,SAAS,OAGZO,OAAM,SAACC,GACNlB,QAAQC,IAAIiB,GACZ,EAAKX,SAAS,CACZC,SAAU,6CACVC,UAAU,EACVP,OAAQ,GACRQ,SAAS,aA1Cf,EAAKH,SAAS,CACZC,SAAU,wCACVC,UAAU,EACVP,OAAQ,MAbZ,EAAKiB,MAAQ,CACXT,SAAS,EACTF,SAAU,GACVC,UAAU,EACVP,OAAQ,IANc,E,0CA2D1B,WACE,OACE,eAACkB,EAAA,EAAD,CAAWC,UAAU,YAArB,UACGC,KAAKH,MAAMX,SAASe,OAAS,EAC5B,cAACC,EAAA,EAAD,CAAOC,QAASH,KAAKH,MAAMV,SAAW,SAAW,UAAjD,SACGa,KAAKH,MAAMX,WAEZ,KACJ,cAACkB,EAAA,EAAD,UACE,cAACA,EAAA,EAAKC,MAAN,UACE,cAACD,EAAA,EAAKE,KAAN,CACEC,GAAG,0BACHC,MAAM,mBACNC,SAAUT,KAAK/B,mBAIrB,yCACC+B,KAAKH,MAAMT,QACV,4BACE,cAACsB,EAAA,EAAD,CAASC,UAAU,aAGrB,4BACGX,KAAKH,MAAMjB,OAAOqB,OAAS,EACxBD,KAAKH,MAAMjB,OAAOgC,KAAK,MACvB,gC,GAtFEC,aCHHC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d8b5541b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.scss\";\nimport Container from \"react-bootstrap/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport axios from \"axios\";\n\ninterface Props {}\n\ninterface State {\n  loading: boolean;\n  alertMsg: string;\n  hasError: boolean;\n  result: number[];\n}\n\nclass App extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      loading: false,\n      alertMsg: \"\",\n      hasError: false,\n      result: [],\n    };\n  }\n  handleChange = (event: React.ChangeEvent<any>) => {\n    const jsonFile = event.target.files[0];\n    if (jsonFile.type !== \"application/json\") {\n      this.setState({\n        alertMsg: \"Invalid file type! Must be JSON file.\",\n        hasError: true,\n        result: [],\n      });\n      return;\n    }\n    const fileReader = new FileReader();\n    fileReader.readAsText(event.target.files[0], \"UTF-8\");\n    fileReader.onload = (event: ProgressEvent<FileReader>) => {\n      console.log(event.target?.result);\n      const options = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        params: { menus: event.target?.result },\n      };\n      this.setState({\n        alertMsg: \"\",\n        hasError: false,\n        result: [],\n        loading: true,\n      });\n      axios\n        .get(\n          process.env.REACT_APP_API_URL + \"/api/v1/menus/calculate_ids\",\n          options\n        )\n        .then((response) => {\n          this.setState({\n            alertMsg: response.data.message,\n            hasError: false,\n            result: response.data.result,\n            loading: false,\n          });\n        })\n        .catch((error) => {\n          console.log(error);\n          this.setState({\n            alertMsg: \"An error occurred, please try again later.\",\n            hasError: true,\n            result: [],\n            loading: false,\n          });\n        });\n    };\n  };\n  render() {\n    return (\n      <Container className=\"mt-5 mb-5\">\n        {this.state.alertMsg.length > 0 ? (\n          <Alert variant={this.state.hasError ? \"danger\" : \"success\"}>\n            {this.state.alertMsg}\n          </Alert>\n        ) : null}\n        <Form>\n          <Form.Group>\n            <Form.File\n              id=\"exampleFormControlFile1\"\n              label=\"Select JSON File\"\n              onChange={this.handleChange}\n            />\n          </Form.Group>\n        </Form>\n        <h4>Output:</h4>\n        {this.state.loading ? (\n          <p>\n            <Spinner animation=\"border\" />\n          </p>\n        ) : (\n          <p>\n            {this.state.result.length > 0\n              ? this.state.result.join(\", \")\n              : \"No calculations yet.\"}\n          </p>\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}